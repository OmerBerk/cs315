Satisfied Requirements

       1. (5pts) Language supports directed graph definition. (tutorial 4.)
	graph(undirected);
       2. (5pts) Language supports undirected graph definition. (tutorial 4.)
	graph(directed);
       3. (10pts) Language supports definition of following vertex properties:(tutorial 3.)
		3.1. A vertex has associated data value as its property.
		vertex v;
		property p1;
		p1<-56;
		v.addProperty("age",p1);
		3.2. A vertex can have multiple attached properties.
		property p2;
		p2<-1.89;
		v.addProperty("height",p2);
		3.3. A property is a (name, value) pair. Properties can be multiple.
		vertex v2;
		v2.addProperty("age",p1);
		v2.addProperty("height",p2);
       4. (10pts) Language supports definition of edge properties. Like as the vertices, edges can have multiple attached properties.(tutorial 3.)
	edge e;
	property p1;
	property p2;
	p1<-55;
	p2<-"cs315";
	e.addProperty("mean",p1);
	e.addProperty("course",p2);
       5. (15pts) Property names are strings but language use dynamic type system for property values. (tutorial 3.)
		5.1. As for primitive types, language provide support of string, integer, and float types. 
		property p1;
        	property p2;
        	property p3;
        	p1 <- 56;
        	p2 <- 2.692;
        	p3 <- “Computer Engineering”;

		5.2. Property values can be colletion types as one of the list, set, and map. Nesting collection types is also supported.
		property1 = [10, 60, 70, 90]; #a set
            	property1 = {“CS202”: 56, “MATH230”: 35, “PHYS102”: 49}; #a map
            	Property1 = (3, 4, 5, 1); #a list

	6. (10pts) Language supports expressing path queries. Path queries can be able to specify concatenation, alternation and repetition. (tutorial 6.)
	request( graph1, ab?|a, 2);
	request( graph2, a*b, 3);
	7. (10pts) Language supports that path query provide filters. Filters are boolean expression which are composed of prediction results of edge properties and vertex properties. (tutorial 8.)
	request( graph1, ab.property1=="cs", 2);
	8. (10pts) Language supports predicates of property values and also it allows arithmetic expressions and functions in these predicates. (tutorial 5.)
	pbafter = name(“university”)->greaterThan(property);
	request(graph2, vertex1.p2>15, 4);
        9. (15pts) Language supports variable usage in path expressions. (tutorial 8.1.)
	int age<-24;
	edge1.addProperty("age",age);
	vertex2.addProperty("year",age);
        10. (10pts) Language supports modularity in path queries. Regular path queries can be divided into pieces and specified separately.  (tutorial 9.)
	divide( path3, path2, path1, vertex1);
